
创建一个
没有控制台窗口
带有自定义图标
单独的可执行文件：
pyinstaller -F -w -i 003.ico yt_dlp_gui.py

使用PyInstaller打包时，请使用以下命令确保DLL目录被正确包含（全部嵌入单文件，运行时释放到临时目录，我觉得不算好的方法）：
pyinstaller --add-data "dll;dll" --add-data "icons;icons" --onefile yt_dlp_gui.py

--------------------------------------------------------------------------------------------------------------------------------------
要将 Python 脚本（`.py` 文件）编译成可执行的 `.exe` 文件，你可以使用一些工具，如 PyInstaller、cx_Freeze 或 Nuitka。以下是如何使用这些工具的详细步骤：

### 使用 PyInstaller

PyInstaller 是一个流行的工具，用于将 Python 程序打包成独立的可执行文件（`.exe` 文件）。以下是如何使用 PyInstaller 将 `.py` 文件打包为 `.exe` 文件的详细说明和案例，以及该方法中常用参数的使用介绍。

#### 安装 PyInstaller

打开命令行工具（Windows 用户可以使用 CMD 或 PowerShell），运行以下命令：

```bash
pip install pyinstaller
```

#### 常用参数及使用

**案例 1：直接打包**

命令：`pyinstaller py文件`；如：`pyinstaller test.py`。直接在电脑上打开 cmd 命令窗口，输入命令后，会生成一个 dist 目录，其中包含可执行文件和一些依赖文件。默认情况下，可执行文件的名称与脚本名称相同。

**案例 2：打包为单独的可执行文件（-F）**

命令：`pyinstaller -F test.py`。将所有文件打包成一个单独的可执行文件。默认情况下，PyInstaller 会生成一个包含可执行文件和相关依赖文件的文件夹。使用此选项后，所有文件会被打包成一个文件。

**案例 3：关闭命令行窗口（-w）**

命令：`pyinstaller -w test.py`。在 Windows 上，默认的 Python 程序会有一个命令行窗口。如果程序是 GUI 程序，使用这个选项可以避免显示命令行窗口。常用于 PyQT 或 Tkinter 等图形界面程序，注意：当对 TK 程序进行打包时，若不添加该选项，打包后的程序很可能无法执行。

**案例 4：设置可执行文件的图标（-i）**

命令：`pyinstaller -i 图标.ico test.py` 设置可执行文件的图标。可以提供一个 .ico 格式的图标文件。这个选项通常用于自定义应用程序的外观。

执行完毕后，会在 dist 文件夹中找到一个名为 test.exe 的可执行文件。这个文件可以在没有 Python 环境的计算机上直接运行，并且会显示自定义的图标。

#### 注意事项：

1. 在打包过程中，如果路径或文件名包含中文，可能会导致报错。因此，建议路径和文件名使用英文。
2. 如果打包的 Python 脚本使用了第三方库或模块，PyInstaller 会尝试将这些依赖项一起打包。但是，有时可能需要手动指定某些隐藏导入的模块。

### 使用 cx_Freeze

cx_Freeze 是另一个用于将 Python 脚本打包成可执行文件的工具。它支持跨平台，并且能够将 Python 代码和依赖的库文件一起打包。

#### 安装 cx_Freeze

命令：`pip install cx_Freeze`。

#### 创建打包脚本

cx_Freeze 需要一个打包脚本来配置打包过程。通常，这个脚本是一个 Python 文件，比如 setup.py。

创建一个 setup.py 文件：

```python
# -*- coding: utf-8 -*-
"""
Author: @CSDN盲敲代码的阿豪
Time: 2025/1/14 13:22
Project: cx_Freeze打包
"""

from cx_Freeze import setup, Executable

# 1、基础配置(可不进行配置)
build_exe_options = {
    "packages": ['os'],  # 需要包含的额外包
    "excludes": ['tkinter'],  # 需要排除的包
    "include_files": [],  # 需要包含的额外文件或文件夹
    "optimize": 2,  # 优化级别
}

# 2、创建可执行文件的配置
executables = [
    Executable(
        script="hello.py",  # 需要打包的.py文件
        base= None,  # 控制台应用程序使用 None，GUI应用程序使用 'Win32GUI'
        icon="窗口图标.ico",  # 可执行文件的图标
        target_name="MyApp.exe",  # 生成的可执行文件名称
    )
]

# 3、调用 setup 函数
setup(
    name="MyApp",  # 应用程序名称
    version="1.0",  # 应用程序版本
    description="My Application",  # 应用程序描述
    options={"build_exe": build_exe_options},  # 构建选项，若没有配置，可不写
    executables=executables,  # 可执行文件配置
)
```

#### 运行打包文件

1、打包为 `.exe` 可执行程序

在 cmd 命令行窗口输入以下命令，生成 `.exe` 程序：

命令：`python setup.py build`setup.py，就是上面创建的打包文件。

执行命令后，代码中指定的 `hello.py` 文件就会被打包为一个可执行文件，存放在一个 build 目录下。

2、打包为一个 `.msi` 安装包

如果你想生成一个安装包（如 .msi 文件），可以在 cmd 命令行窗口使用以下命令：

命令：`python setup.py bdist_msi`

执行命令后，会生成两个目录，build 目录下依然存放着可执行文件，dist 目录下则存放着一个 .msi 安装包。

### 使用 Nuitka

Nuitka 是一个将 Python 脚本编译为 C 代码并生成高效可执行文件（.exe）的工具。它支持跨平台编译，并且生成的二进制文件性能优于传统的打包工具。以下是详细的使用说明和案例，包括每种参数的使用方法。

#### 安装 Nuitka

命令：`pip install nuitka`。

#### 基本使用

方法 1：在 cmd 命令行窗口执行命令

命令：`nuitka --standalone --onefile --windows-disable-console --output-dir=dist main.py`

参数说明：

- `--standalone`：将脚本及其依赖打包为一个独立的文件夹。
- `--onefile`：将所有文件打包为一个单独的可执行文件。
- `--windows-disable-console`：用于 GUI 应用程序，禁用控制台窗口，默认为不禁用。
- `--output-dir=dist`：指定输出目录为 dist。
- `main.py`：要打包的 Python 脚本。

方法 2：创建打包脚本

可以创建一个打包脚本（如 build.py）来自动化打包过程。

示例 build.py 文件：

```python
# -*- coding: utf-8 -*-
"""
Author: @CSDN盲敲代码的阿豪
Time: 2025/1/14 13:22
Project: Nuitka打包
"""

import os
import subprocess

# 打包配置
script = "main.py"  # 主脚本文件
output_dir = "dist"  # 输出目录
icon = "icon.ico"  # 可执行文件的图标
disable_console = True  # 是否禁用控制台窗口

# 构建命令
command = [
    "nuitka",
    "--standalone",
    "--onefile",
    f"--output-dir={output_dir}",
    f"--windows-icon={icon}",
]

# 确定是否禁用控制台窗口
if disable_console:
    command.append("--windows-disable-console")

command.append(script)

# 运行打包命令
subprocess.run(command)
```

运行上面的代码，即可对目标脚本进行打包。

以上是将 Python 脚本编译为 `.exe` 文件的几种方法。你可以根据自己的需求和环境选择合适的工具和方法。